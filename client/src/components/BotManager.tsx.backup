import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  CardActions,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  IconButton,
  Avatar,
  Tooltip,
  Alert,
  LinearProgress
} from '@mui/material';
import {
  Add,
  PlayArrow,
  Stop,
  RestartAlt,
  Delete,
  QrCode,
  Phone,
  Error,
  CheckCircle,
  Schedule,
  SmartToy,
  PhoneAndroid,
  Message,
  TrendingUp
} from '@mui/icons-material';
import { Bot, SystemStatus } from '../types';
import api from '../services/api';

interface BotManagerProps {
  bots: Bot[];
  onNotification: (message: string, severity: 'success' | 'error' | 'warning' | 'info') => void;
  onUserDataRefresh?: () => void;
  user?: {
    id: string;
    email: string;
    role: 'admin' | 'law_office';
    lawOfficeName?: string;
    botCredits?: number;
  };
  systemStatus?: SystemStatus | null;
}

interface StatsCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  color: string;
  subtitle?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({ title, value, icon, color, subtitle }) => (
  <Card sx={{ minWidth: { xs: '100%', sm: 275 }, m: 1, width: { xs: '100%', sm: 'auto' } }}>
    <CardContent>
      <Box display="flex" alignItems="center" justifyContent="space-between">
        <Box>
          <Typography color="textSecondary" gutterBottom variant="h6">
            {title}
          </Typography>
          <Typography variant="h4" component="h2">
            {value}
          </Typography>
          {subtitle && (
            <Typography color="textSecondary" variant="body2">
              {subtitle}
            </Typography>
          )}
        </Box>
        <Box sx={{ color, fontSize: 40 }}>
          {icon}
        </Box>
      </Box>
    </CardContent>
  </Card>
);

interface QRCodeDialogProps {
  open: boolean;
  onClose: () => void;
  bot: Bot | null;
}

const QRCodeDialog: React.FC<QRCodeDialogProps> = ({ open, onClose, bot }) => {
  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        QR Code for {bot?.name}
      </DialogTitle>
      <DialogContent>
        {bot?.qrCode ? (
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <img 
              src={bot.qrCode} 
              alt="WhatsApp QR Code" 
              style={{ maxWidth: '100%', height: 'auto' }}
            />
            <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
              Scan this QR code with your WhatsApp mobile app
            </Typography>
          </Box>
        ) : (
          <Box sx={{ textAlign: 'center', p: 4 }}>
            <Typography>QR Code not available</Typography>
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Close</Button>
      </DialogActions>
    </Dialog>
  );
};

const BotCard: React.FC<{ 
  bot: Bot; 
  onAction: (action: string, botId: string) => void;
  onShowQR: (bot: Bot) => void;
}> = ({ bot, onAction, onShowQR }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'success';
      case 'waiting_for_scan': return 'warning';
      case 'error': return 'error';
      case 'disconnected': return 'default';
      case 'stopped': return 'default';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return <CheckCircle />;
      case 'waiting_for_scan': return <QrCode />;
      case 'error': return <Error />;
      case 'disconnected': return <Phone />;
      default: return <Schedule />;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  return (
    <Card sx={{ minWidth: { xs: '100%', sm: 300 }, m: 1, maxWidth: '100%' }}>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Avatar sx={{ mr: 2, bgcolor: getStatusColor(bot.status) === 'success' ? '#25D366' : '#ccc' }}>
            {getStatusIcon(bot.status)}
          </Avatar>
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h6">{bot.name}</Typography>
            {bot.assistantName && (
              <Typography variant="body2" color="textSecondary" sx={{ fontStyle: 'italic' }}>
                Assistant: {bot.assistantName}
              </Typography>
            )}
            <Chip 
              label={bot.status.replace(/_/g, ' ')} 
              color={getStatusColor(bot.status)} 
              size="small"
            />
          </Box>
        </Box>

        {bot.phoneNumber && (
          <Typography variant="body2" color="textSecondary">
            ðŸ“± {bot.phoneNumber}
          </Typography>
        )}

        <Typography variant="body2" color="textSecondary">
          ðŸ’¬ {bot.messageCount} messages
        </Typography>

        {bot.lastActivity && (
          <Typography variant="body2" color="textSecondary">
            ðŸ•’ Last active: {formatDate(bot.lastActivity)}
          </Typography>
        )}

        <Typography variant="body2" color="textSecondary">
          ðŸ“… Created: {formatDate(bot.createdAt)}
        </Typography>

        {bot.error && (
          <Alert severity="error" sx={{ mt: 1 }}>
            {bot.error}
          </Alert>
        )}
      </CardContent>

      <CardActions>
        {bot.status === 'waiting_for_scan' && bot.qrCode && (
          <Tooltip title="Show QR Code">
            <IconButton onClick={() => onShowQR(bot)} color="primary">
              <QrCode />
            </IconButton>
          </Tooltip>
        )}
        
        {bot.isActive ? (
          <Tooltip title="Stop Bot">
            <IconButton onClick={() => onAction('stop', bot.id)} color="error">
              <Stop />
            </IconButton>
          </Tooltip>
        ) : (
          <Tooltip title="Start Bot">
            <IconButton onClick={() => onAction('restart', bot.id)} color="success">
              <PlayArrow />
            </IconButton>
          </Tooltip>
        )}

        <Tooltip title="Restart Bot">
          <IconButton onClick={() => onAction('restart', bot.id)} color="warning">
            <RestartAlt />
          </IconButton>
        </Tooltip>

        <Tooltip title="Delete Bot">
          <IconButton onClick={() => onAction('delete', bot.id)} color="error">
            <Delete />
          </IconButton>
        </Tooltip>
      </CardActions>
    </Card>
  );
};

const BotManager: React.FC<BotManagerProps> = ({ bots, onNotification, onUserDataRefresh, user, systemStatus }) => {
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [qrDialogOpen, setQrDialogOpen] = useState(false);
  const [selectedBot, setSelectedBot] = useState<Bot | null>(null);
  const [newBotName, setNewBotName] = useState('');
  const [newAssistantName, setNewAssistantName] = useState('Ana'); // Default to Ana
  const [loading, setLoading] = useState(false);
  const [config, setConfig] = useState<any>(null);

  useEffect(() => {
    const fetchConfig = async () => {
      try {
        const response = await api.get('/admin/config');
        if (response.data.success) {
          setConfig(response.data.config);
        }
      } catch (error) {
        console.error('Failed to fetch config:', error);
      }
    };

    fetchConfig();
  }, []);

  // Statistics calculations
  const activeBots = bots.filter(bot => bot.isActive).length;
  const totalMessages = bots.reduce((sum, bot) => sum + bot.messageCount, 0);
  const connectedBots = bots.filter(bot => bot.status === 'connected').length;

  const formatUptime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  const formatMemory = (bytes: number) => {
    return `${Math.round(bytes / 1024 / 1024)}MB`;
  };

  const handleCreateBot = async () => {
    if (!newBotName.trim()) return;

    setLoading(true);
    try {
      const response = await api.post('/bot', { 
        name: newBotName,
        assistantName: newAssistantName.trim() || 'Ana' 
      });
      if (response.data.success) {
        onNotification('Bot created successfully!', 'success');
        setCreateDialogOpen(false);
        setNewBotName('');
        setNewAssistantName('Ana'); // Reset to default
        
        // Refresh user data to update bot credits
        if (onUserDataRefresh) {
          onUserDataRefresh();
        }
        
        // The bot will be added via socket.io events
      } else {
        onNotification(response.data.error || 'Failed to create bot', 'error');
      }
    } catch (error: any) {
      onNotification(error.response?.data?.error || 'Failed to create bot', 'error');
    }
    setLoading(false);
  };

  const handleBotAction = async (action: string, botId: string) => {
    setLoading(true);
    try {
      let response;
      switch (action) {
        case 'stop':
          response = await api.post(`/bot/${botId}/stop`);
          break;
        case 'restart':
          response = await api.post(`/bot/${botId}/restart`);
          break;
        case 'delete':
          response = await api.delete(`/bot/${botId}`);
          break;
        default:
          return;
      }

      if (response.data.success) {
        onNotification(response.data.message || `Bot ${action} successful`, 'success');
      } else {
        onNotification(response.data.error || `Failed to ${action} bot`, 'error');
      }
    } catch (error: any) {
      onNotification(error.response?.data?.error || `Failed to ${action} bot`, 'error');
    }
    setLoading(false);
  };

  const showQRCode = (bot: Bot) => {
    setSelectedBot(bot);
    setQrDialogOpen(true);
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3, flexDirection: { xs: 'column', sm: 'row' }, gap: { xs: 2, sm: 0 } }}>
        <Box>
          <Typography variant="h4">
            Gerenciar Bots
          </Typography>
          <Typography variant="body1" color="textSecondary">
            Gerencie seus bots do WhatsApp e monitore as estatÃ­sticas
          </Typography>
        </Box>
        
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={() => setCreateDialogOpen(true)}
          disabled={loading}
        >
          Criar Novo Bot
        </Button>
      </Box>

      {/* Statistics Cards */}
      <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: { xs: 'center', sm: 'space-around' }, gap: 1, mb: 4 }}>
        <StatsCard
          title="Total de Bots"
          value={bots.length}
          icon={<SmartToy />}
          color="#25D366"
        />
        
        <StatsCard
          title="Bots Ativos"
          value={activeBots}
          icon={<PhoneAndroid />}
          color="#128C7E"
          subtitle={`${connectedBots} conectados`}
        />
        
        <StatsCard
          title="Total de Mensagens"
          value={totalMessages.toLocaleString()}
          icon={<Message />}
          color="#075E54"
        />

        {user?.role === 'law_office' && (
          <StatsCard
            title="CrÃ©ditos de Bot"
            value={user.botCredits || 0}
            icon={<SmartToy />}
            color="#FF6B35"
            subtitle={`${bots.length} em uso`}
          />
        )}
      </Box>

      {/* System Status Overview */}
      <Box sx={{ display: 'flex', flexWrap: 'wrap', mt: 2, gap: 1, mb: 4 }}>
        <Card sx={{ minWidth: { xs: '100%', sm: 400 }, m: 1, flex: 1 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              VisÃ£o Geral dos Status
            </Typography>
            <Box sx={{ mb: 2 }}>
              {['connected', 'waiting_for_scan', 'disconnected', 'error'].map(status => {
                const count = bots.filter(bot => bot.status === status).length;
                const color = {
                  connected: 'success',
                  waiting_for_scan: 'warning',
                  disconnected: 'default',
                  error: 'error'
                }[status] as 'success' | 'warning' | 'default' | 'error';
                
                const statusLabels = {
                  connected: 'Conectado',
                  waiting_for_scan: 'Aguardando QR',
                  disconnected: 'Desconectado',
                  error: 'Erro'
                };
                
                return (
                  <Box key={status} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">
                      {statusLabels[status as keyof typeof statusLabels]}
                    </Typography>
                    <Chip 
                      label={count} 
                      color={color}
                      size="small"
                    />
                  </Box>
                );
              })}
            </Box>
          </CardContent>
        </Card>

        {config && (
          <Card sx={{ minWidth: { xs: '100%', sm: 400 }, m: 1, flex: 1 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ConfiguraÃ§Ã£o do Sistema
              </Typography>
              <Box>
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Status do Groq LLM
                  </Typography>
                  <Chip 
                    label={config.groqConfigured ? 'Conectado' : 'NÃ£o Configurado'} 
                    color={config.groqConfigured ? 'success' : 'error'}
                    size="small"
                  />
                </Box>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Atrasos de Resposta
                  </Typography>
                  <Typography variant="body2">
                    {config.responseDelays?.min || 0}ms - {config.responseDelays?.max || 0}ms
                  </Typography>
                </Box>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Limite de Taxa
                  </Typography>
                  <Typography variant="body2">
                    {config.rateLimit?.maxRequests || 0} solicitaÃ§Ãµes por minuto
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        )}
      </Box>
          subtitle={`${connectedBots} conectados`}
        />
        
        <StatsCard
          title="Total de Mensagens"
          value={totalMessages.toLocaleString()}
          icon={<Message />}
          color="#075E54"
        />

        {user?.role === 'law_office' && (
          <StatsCard
            title="CrÃ©ditos de Bot"
            value={user.botCredits || 0}
            icon={<SmartToy />}
            color="#FF6B35"
            subtitle={`${bots.length} em uso`}
          />
        )}
      </Box>

      {/* System Status Overview */}
      <Box sx={{ display: 'flex', flexWrap: 'wrap', mt: 2, gap: 1, mb: 4 }}>
        <Card sx={{ minWidth: { xs: '100%', sm: 400 }, m: 1, flex: 1 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              VisÃ£o Geral dos Status
            </Typography>
            <Box sx={{ mb: 2 }}>
              {['connected', 'waiting_for_scan', 'disconnected', 'error'].map(status => {
                const count = bots.filter(bot => bot.status === status).length;
                const color = {
                  connected: 'success',
                  waiting_for_scan: 'warning',
                  disconnected: 'default',
                  error: 'error'
                }[status] as 'success' | 'warning' | 'default' | 'error';
                
                const statusLabels = {
                  connected: 'Conectado',
                  waiting_for_scan: 'Aguardando QR',
                  disconnected: 'Desconectado',
                  error: 'Erro'
                };
                
                return (
                  <Box key={status} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2">
                      {statusLabels[status as keyof typeof statusLabels]}
                    </Typography>
                    <Chip 
                      label={count} 
                      color={color}
                      size="small"
                    />
                  </Box>
                );
              })}
            </Box>
          </CardContent>
        </Card>

        {systemStatus && (
          <Card sx={{ minWidth: { xs: '100%', sm: 400 }, m: 1, flex: 1 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Status do Sistema
              </Typography>
              <Box>
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Tempo Ativo
                  </Typography>
                  <Typography variant="body1">
                    {formatUptime(systemStatus.uptime)}
                  </Typography>
                </Box>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Uso de MemÃ³ria
                  </Typography>
                  <Typography variant="body1">
                    {formatMemory(systemStatus.memory.heapUsed)}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        )}

        {config && (
          <Card sx={{ minWidth: { xs: '100%', sm: 400 }, m: 1, flex: 1 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ConfiguraÃ§Ã£o do Sistema
              </Typography>
              <Box>
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Status do Groq LLM
                  </Typography>
                  <Chip 
                    label={config.groqConfigured ? 'Conectado' : 'NÃ£o Configurado'} 
                    color={config.groqConfigured ? 'success' : 'error'}
                    size="small"
                  />
                </Box>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Atrasos de Resposta
                  </Typography>
                  <Typography variant="body2">
                    {config.responseDelays?.min || 0}ms - {config.responseDelays?.max || 0}ms
                  </Typography>
                </Box>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Limite de Taxa
                  </Typography>
                  <Typography variant="body2">
                    {config.rateLimit?.maxRequests || 0} solicitaÃ§Ãµes por minuto
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        )}
      </Box>
          </Typography>
          {user?.role === 'law_office' && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              CrÃ©ditos disponÃ­veis: <strong>{user.botCredits || 0}</strong> | Bots criados: <strong>{bots.length}</strong> | Restantes: <strong>{Math.max(0, (user.botCredits || 0) - bots.length)}</strong>
            </Typography>
          )}
        </Box>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={() => setCreateDialogOpen(true)}
          disabled={loading || (user?.role === 'law_office' && (user.botCredits || 0) <= bots.length)}
        >
          Criar Novo Bot
        </Button>
      </Box>

      {/* Credits Warning for Law Office Users */}
      {user?.role === 'law_office' && (
        <>
          {(user.botCredits || 0) <= bots.length && (
            <Alert severity="warning" sx={{ mb: 2 }}>
              VocÃª nÃ£o possui crÃ©ditos suficientes para criar novos bots. Entre em contato com o administrador para obter mais crÃ©ditos.
            </Alert>
          )}
          {(user.botCredits || 0) - bots.length <= 1 && (user.botCredits || 0) > bots.length && (
            <Alert severity="info" sx={{ mb: 2 }}>
              VocÃª possui apenas {(user.botCredits || 0) - bots.length} crÃ©dito(s) restante(s). Considere solicitar mais crÃ©ditos ao administrador.
            </Alert>
          )}
        </>
      )}

      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
        {bots.length === 0 ? (
          <Card sx={{ minWidth: { xs: '100%', sm: 300 }, m: 1, maxWidth: '100%' }}>
            <CardContent>
              <Typography variant="h6" align="center" color="textSecondary">
                Nenhum bot criado ainda
              </Typography>
              <Typography variant="body2" align="center" color="textSecondary">
                Clique em "Criar Novo Bot" para comeÃ§ar
              </Typography>
            </CardContent>
          </Card>
        ) : (
          bots.map(bot => (
            <BotCard
              key={bot.id}
              bot={bot}
              onAction={handleBotAction}
              onShowQR={showQRCode}
            />
          ))
        )}
      </Box>

      {/* Create Bot Dialog */}
      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)}>
        <DialogTitle>Create New Bot</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Bot Name"
            fullWidth
            variant="outlined"
            value={newBotName}
            onChange={(e) => setNewBotName(e.target.value)}
            placeholder="Enter a name for your bot"
            sx={{ mb: 2 }}
          />
          <TextField
            margin="dense"
            label="Assistant Name"
            fullWidth
            variant="outlined"
            value={newAssistantName}
            onChange={(e) => setNewAssistantName(e.target.value)}
            placeholder="Enter the assistant's name (e.g., Ana, Maria, JoÃ£o)"
            helperText="This is the name your bot will use when talking to clients"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => {
            setCreateDialogOpen(false);
            setNewBotName('');
            setNewAssistantName('Ana');
          }}>Cancel</Button>
          <Button 
            onClick={handleCreateBot} 
            variant="contained"
            disabled={!newBotName.trim() || !newAssistantName.trim() || loading}
          >
            Create
          </Button>
        </DialogActions>
      </Dialog>

      {/* QR Code Dialog */}
      <QRCodeDialog
        open={qrDialogOpen}
        onClose={() => setQrDialogOpen(false)}
        bot={selectedBot}
      />
    </Box>
  );
};

export default BotManager;
