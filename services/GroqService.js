import { Groq } from 'groq-sdk';
import dotenv from 'dotenv';

dotenv.config();

export class GroqService {
  constructor() {
    this.groq = new Groq({
      apiKey: process.env.GROQ_API_KEY
    });
    
    this.systemPrompt = `Voc√™ √© um assistente virtual de um escrit√≥rio de advocacia brasileiro especializado em triagem jur√≠dica. Suas caracter√≠sticas:

PERSONALIDADE:
- Profissional, mas acess√≠vel e emp√°tico
- Fala em portugu√™s brasileiro natural
- Usa linguagem simples, sem juridiqu√™s
- Demonstra compreens√£o e acolhimento

FUN√á√ÉO PRINCIPAL:
- Realizar triagem inicial de casos jur√≠dicos
- Coletar informa√ß√µes b√°sicas dos clientes
- Classificar urg√™ncia e √°rea do direito
- Orientar sobre documentos necess√°rios

√ÅREAS DE ATUA√á√ÉO:
- Direito Trabalhista
- Direito de Fam√≠lia  
- Direito Civil
- Direito Criminal
- Direito do Consumidor

INSTRU√á√ïES:
1. Seja sempre emp√°tico com situa√ß√µes dif√≠ceis
2. Explique procedimentos de forma simples
3. N√£o d√™ conselhos jur√≠dicos espec√≠ficos
4. Sempre reforce que um advogado dar√° orienta√ß√£o detalhada
5. Use emojis moderadamente para ser mais humano
6. Mantenha respostas concisas (m√°ximo 3 frases)
7. Se n√£o souber algo, seja honesto e encaminhe para o advogado

TOME CUIDADO:
- Nunca prometa resultados de processos
- N√£o critique outros advogados
- N√£o comente sobre valores de honor√°rios
- Sempre oriente a procurar um advogado para casos urgentes

LEMBRE-SE: Voc√™ est√° ajudando pessoas em momentos dif√≠ceis. Seja humano, compreensivo e profissional.`;
  }

  async generateResponse(userMessage, context = {}) {
    try {
      if (!this.groq || !process.env.GROQ_API_KEY) {
        return 'Desculpe, estou com dificuldades t√©cnicas no momento. Um advogado entrar√° em contato em breve. üìû';
      }

      const contextInfo = this.buildContextString(context);
      
      const completion = await this.groq.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: this.systemPrompt + contextInfo
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        model: 'openai/gpt-oss-120b', // Fast and efficient model
        temperature: 0.7,
        max_tokens: 200, // Slightly more for legal explanations
        top_p: 0.9,
        stream: false
      });

      const response = completion.choices[0]?.message?.content;
      
      if (!response) {
        throw new Error('No response generated from Groq');
      }

      return response.trim();
      
    } catch (error) {
      console.error('Groq API error:', error);
      
      // Return fallback responses in Portuguese based on error type
      if (error.message.includes('API key')) {
        return 'Ol√°! Estou com problemas t√©cnicos tempor√°rios. Nossa equipe j√° foi notificada e um advogado entrar√° em contato em breve. üì±';
      }
      
      if (error.message.includes('rate limit')) {
        return 'Estou recebendo muitas mensagens agora. Aguarde um momento e tente novamente, por favor. ‚è≥';
      }
      
      // Generic fallback in Portuguese
      return 'Desculpe, n√£o consegui processar sua mensagem. Pode reformular? Um advogado tamb√©m pode te atender diretamente. üíº';
    }
  }

  async generateResponse(userMessage, context = {}) {
    try {
      if (!this.groq || !process.env.GROQ_API_KEY) {
        throw new Error('Groq API not configured');
      }

      const contextInfo = this.buildContextString(context);
      
      const completion = await this.groq.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: this.systemPrompt + contextInfo
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        model: 'openai/gpt-oss-120b', // Fast and efficient model
        temperature: 0.7,
        max_tokens: 150, // Keep responses concise for WhatsApp
        top_p: 0.9,
        stream: false
      });

      const response = completion.choices[0]?.message?.content;
      
      if (!response) {
        throw new Error('No response generated from Groq');
      }

      return response.trim();
      
    } catch (error) {
      console.error('Groq API error:', error);
      
      // Return fallback responses based on error type
      if (error.message.includes('API key')) {
        return 'Hi! I\'m currently having some technical difficulties. Please try again in a few minutes.';
      }
      
      if (error.message.includes('rate limit')) {
        return 'I\'m getting a lot of messages right now. Could you please wait a moment and try again?';
      }
      
      // Generic fallback
      return 'Sorry, I didn\'t quite catch that. Could you please rephrase your message?';
    }
  }

  buildContextString(context) {
    let contextStr = '\n\nContext:';
    
    if (context.contactName) {
      contextStr += `\n- User's name: ${context.contactName}`;
    }
    
    if (context.isGroup) {
      contextStr += `\n- This is a group chat`;
      if (context.chatName) {
        contextStr += ` called "${context.chatName}"`;
      }
    } else {
      contextStr += `\n- This is a private conversation`;
    }
    
    return contextStr;
  }

  async testConnection() {
    try {
      const response = await this.generateResponse('Hello, this is a test message.');
      return { success: true, response };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // M√©todo espec√≠fico para an√°lise de triagem jur√≠dica (maior limite de tokens)
  async generateAnalysisResponse(prompt) {
    try {
      if (!this.groq || !process.env.GROQ_API_KEY) {
        throw new Error('Groq service not available');
      }

      const completion = await this.groq.chat.completions.create({
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        model: 'openai/gpt-oss-120b',
        temperature: 0.3, // Mais determin√≠stico para an√°lise estruturada
        max_tokens: 8192, // Maior limite para an√°lises completas
        top_p: 0.9,
        stream: false
      });

      const response = completion.choices[0]?.message?.content;
      
      if (!response) {
        throw new Error('No response generated from Groq');
      }

      return response.trim();
      
    } catch (error) {
      console.error('Groq Analysis API error:', error);
      throw error;
    }
  }
}
