import dotenv from 'dotenv';

dotenv.config();

export class LegalTriageService {
  constructor() {
    this.conversationSteps = new Map();
    
    // Tipos de casos jur√≠dicos comuns
    this.legalCases = {
      'trabalhista': {
        name: 'Direito Trabalhista',
        keywords: ['trabalho', 'demiss√£o', 'rescis√£o', 'horas extras', 'f√©rias', 'sal√°rio', 'CLT', 'emprego', 'patr√£o', 'chefe'],
        questions: [
          'Qual √© a natureza do seu problema trabalhista?',
          'Voc√™ ainda est√° empregado ou foi demitido?',
          'H√° quanto tempo trabalha/trabalhou na empresa?',
          'Possui carteira assinada?',
          'Tem documentos relacionados ao caso?'
        ]
      },
      'civil': {
        name: 'Direito Civil',
        keywords: ['contrato', 'd√≠vida', 'cobran√ßa', 'indeniza√ß√£o', 'danos', 'acidente', 'vizinho', 'propriedade'],
        questions: [
          'Qual √© o tipo de problema civil que est√° enfrentando?',
          'Existe algum contrato envolvido?',
          'Quando o problema come√ßou?',
          'J√° tentou resolver amigavelmente?',
          'Tem provas ou documentos do ocorrido?'
        ]
      },
      'familia': {
        name: 'Direito de Fam√≠lia',
        keywords: ['div√≥rcio', 'pens√£o', 'guarda', 'filhos', 'casamento', 'uni√£o est√°vel', 'separa√ß√£o', 'partilha'],
        questions: [
          'Qual √© a situa√ß√£o familiar que precisa resolver?',
          'H√° filhos menores envolvidos?',
          'Existe patrim√¥nio para partilha?',
          'O outro c√¥njuge concorda com o processo?',
          'H√° viol√™ncia dom√©stica envolvida?'
        ]
      },
      'criminal': {
        name: 'Direito Criminal',
        keywords: ['crime', 'delegacia', 'boletim', 'roubo', 'furto', 'agress√£o', 'amea√ßa', 'processo criminal'],
        questions: [
          'Voc√™ √© v√≠tima ou est√° sendo acusado?',
          'J√° foi registrado boletim de ocorr√™ncia?',
          'Quando ocorreu o fato?',
          'H√° testemunhas?',
          'J√° foi intimado ou processado?'
        ]
      },
      'consumidor': {
        name: 'Direito do Consumidor',
        keywords: ['compra', 'produto', 'servi√ßo', 'defeito', 'troca', 'devolu√ß√£o', 'procon', 'empresa'],
        questions: [
          'Qual produto ou servi√ßo est√° com problema?',
          'Quando foi a compra/contrata√ß√£o?',
          'J√° tentou resolver com a empresa?',
          'Tem nota fiscal ou comprovante?',
          'Qual preju√≠zo teve?'
        ]
      }
    };

    // Informa√ß√µes de urg√™ncia
    this.urgencyLevels = {
      'alta': ['pris√£o', 'flagrante', 'intima√ß√£o', 'audi√™ncia', 'prazo', 'urgente', 'amanh√£', 'hoje'],
      'media': ['processo', 'a√ß√£o', 'resposta', 'contesta√ß√£o', 'semana'],
      'baixa': ['consulta', 'orienta√ß√£o', 'd√∫vida', 'informa√ß√£o']
    };
  }

  // Inicia o atendimento de triagem
  startTriage(contactId, message) {
    const conversation = {
      step: 'inicio',
      caseType: null,
      urgency: 'baixa',
      answers: [],
      startTime: new Date(),
      contactInfo: {}
    };

    this.conversationSteps.set(contactId, conversation);
    return conversation; // Return the conversation object, not the welcome message
  }

  // Processa a mensagem na triagem
  async processMessage(contactId, message, contactName, groqService = null) {
    let conversation = this.conversationSteps.get(contactId);
    
    if (!conversation) {
      conversation = this.startTriage(contactId, message);
      // Return welcome message for new conversations
      return this.getWelcomeMessage();
    }

    // Verify conversation is an object (safety check)
    if (typeof conversation === 'string') {
      console.warn('Found string conversation, resetting:', contactId);
      conversation = this.startTriage(contactId, message);
      return this.getWelcomeMessage();
    }

    // Detecta urg√™ncia
    const urgency = this.detectUrgency(message);
    if (urgency !== 'baixa') {
      conversation.urgency = urgency;
    }

    switch (conversation.step) {
      case 'inicio':
        return this.handleInitialMessage(contactId, message, contactName);
      
      case 'identificacao':
        return this.handleIdentification(contactId, message);
      
      case 'tipo_caso':
        return this.handleCaseType(contactId, message);
      
      case 'perguntas_especificas':
        return this.handleSpecificQuestions(contactId, message);
      
      case 'finalizar':
        return this.handleFinalization(contactId, message);
      
      default:
        return this.handleInitialMessage(contactId, message, contactName);
    }
  }

  getWelcomeMessage() {
    return `üëã Ol√°! Bem-vindo(a) ao atendimento do *Escrit√≥rio Jur√≠dico V3*.

Sou seu assistente virtual e vou ajud√°-lo a organizar suas informa√ß√µes para que nossos advogados possam atend√™-lo da melhor forma.

üìã *Para come√ßar, preciso de algumas informa√ß√µes:*

Digite seu *nome completo* para iniciarmos o atendimento.`;
  }

  handleInitialMessage(contactId, message, contactName) {
    const conversation = this.conversationSteps.get(contactId);
    
    // Detecta o tipo de caso automaticamente
    const detectedCase = this.detectCaseType(message);
    
    if (detectedCase) {
      conversation.caseType = detectedCase;
    }

    conversation.step = 'identificacao';
    conversation.contactInfo.name = contactName;
    
    this.conversationSteps.set(contactId, conversation);

    if (conversation.urgency === 'alta') {
      return `‚ö†Ô∏è *CASO URGENTE DETECTADO* ‚ö†Ô∏è

Entendi que seu caso tem urg√™ncia! Vou priorizar seu atendimento.

Para come√ßar, confirme seu *nome completo*:`;
    }

    return `Obrigado por entrar em contato! 

Para come√ßar o atendimento, confirme seu *nome completo*:`;
  }

  handleIdentification(contactId, message) {
    const conversation = this.conversationSteps.get(contactId);
    conversation.contactInfo.fullName = message.trim();
    conversation.step = 'tipo_caso';
    
    this.conversationSteps.set(contactId, conversation);

    if (conversation.caseType) {
      const caseInfo = this.legalCases[conversation.caseType];
      return `Obrigado, *${conversation.contactInfo.fullName}*! 

Pelo que entendi, seu caso pode estar relacionado a *${caseInfo.name}*. 

Est√° correto? Digite:
‚Ä¢ *1* - Sim, √© isso mesmo
‚Ä¢ *2* - N√£o, √© outro tipo de caso
‚Ä¢ *3* - N√£o tenho certeza`;
    }

    return `Obrigado, *${conversation.contactInfo.fullName}*! 

Agora me conta: *qual tipo de problema jur√≠dico voc√™ precisa resolver?*

Alguns exemplos:
üè¢ Problemas trabalhistas (demiss√£o, horas extras, etc.)
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Quest√µes de fam√≠lia (div√≥rcio, pens√£o, guarda)
üè† Direito civil (contratos, d√≠vidas, indeniza√ß√£o)
üõ°Ô∏è Direito criminal (v√≠tima ou acusa√ß√£o)
üõí Direito do consumidor (problemas com compras)

*Descreva brevemente sua situa√ß√£o:*`;
  }

  handleCaseType(contactId, message) {
    const conversation = this.conversationSteps.get(contactId);
    
    if (conversation.caseType && ['1', 'sim', 'correto', 'isso mesmo'].some(word => 
      message.toLowerCase().includes(word))) {
      // Caso j√° detectado e confirmado
      conversation.step = 'perguntas_especificas';
      conversation.currentQuestion = 0;
      this.conversationSteps.set(contactId, conversation);
      return this.askSpecificQuestion(contactId);
    }

    // Detecta o tipo de caso pela resposta
    const detectedCase = this.detectCaseType(message);
    
    if (detectedCase) {
      conversation.caseType = detectedCase;
      conversation.step = 'perguntas_especificas';
      conversation.currentQuestion = 0;
      this.conversationSteps.set(contactId, conversation);
      
      const caseInfo = this.legalCases[detectedCase];
      return `Perfeito! Identifiquei que seu caso √© de *${caseInfo.name}*.

Agora vou fazer algumas perguntas espec√≠ficas para entender melhor sua situa√ß√£o:

${this.askSpecificQuestion(contactId)}`;
    }

    // Se n√£o conseguiu detectar, pede mais informa√ß√µes
    return `Preciso entender melhor seu caso. 

*Escolha uma das op√ß√µes abaixo:*

1Ô∏è‚É£ *Trabalhista* - Problemas no trabalho
2Ô∏è‚É£ *Fam√≠lia* - Div√≥rcio, pens√£o, guarda dos filhos
3Ô∏è‚É£ *Civil* - Contratos, d√≠vidas, indeniza√ß√µes
4Ô∏è‚É£ *Criminal* - Crimes, delegacia, processo criminal
5Ô∏è‚É£ *Consumidor* - Problemas com compras ou servi√ßos

Digite o *n√∫mero* da op√ß√£o ou me conte mais detalhes sobre seu problema.`;
  }

  askSpecificQuestion(contactId) {
    const conversation = this.conversationSteps.get(contactId);
    const caseInfo = this.legalCases[conversation.caseType];
    
    if (conversation.currentQuestion < caseInfo.questions.length) {
      const question = caseInfo.questions[conversation.currentQuestion];
      return `üìù *Pergunta ${conversation.currentQuestion + 1}/${caseInfo.questions.length}:*

${question}`;
    }
    
    // Terminou as perguntas
    conversation.step = 'finalizar';
    this.conversationSteps.set(contactId, conversation);
    return this.generateSummary(contactId, groqService);
  }

  handleSpecificQuestions(contactId, message) {
    const conversation = this.conversationSteps.get(contactId);
    
    // Salva a resposta
    conversation.answers.push({
      question: conversation.currentQuestion,
      answer: message,
      timestamp: new Date()
    });
    
    conversation.currentQuestion++;
    this.conversationSteps.set(contactId, conversation);
    
    return this.askSpecificQuestion(contactId);
  }

  async generateSummary(contactId, groqService = null) {
    const conversation = this.conversationSteps.get(contactId);
    const caseInfo = this.legalCases[conversation.caseType];
    
    // Gerar an√°lise completa via LLM se dispon√≠vel
    let analysis = null;
    if (groqService) {
      try {
        const allMessages = conversation.answers.map(a => `${a.question}: ${a.answer}`);
        analysis = await this.analyzeCompleteCase(contactId, allMessages, groqService);
      } catch (error) {
        console.warn('Erro ao gerar an√°lise LLM, usando formato b√°sico:', error);
      }
    }

    let summary = `‚úÖ *TRIAGEM CONCLU√çDA*

*Cliente:* ${conversation.contactInfo.fullName}
*√Årea do Direito:* ${caseInfo.name}
*Urg√™ncia:* ${this.getUrgencyText(conversation.urgency)}
*Data/Hora:* ${conversation.startTime.toLocaleString('pt-BR')}

*üìã RESUMO DAS INFORMA√á√ïES:*\n`;

    conversation.answers.forEach((answer, index) => {
      summary += `\n*${index + 1}.* ${caseInfo.questions[index]}\nüìù ${answer.answer}\n`;
    });

    // Incluir an√°lise jur√≠dica detalhada se dispon√≠vel
    if (analysis && analysis.legal_solution) {
      summary += `\n*‚öñÔ∏è AN√ÅLISE JUR√çDICA PRELIMINAR:*

*üìñ Resumo:* ${analysis.legal_solution.summary}

*üìö Base Legal:* ${analysis.legal_solution.legal_basis}

*üìà Probabilidade de Sucesso:* ${analysis.legal_solution.success_probability}

*üìÑ Documentos Necess√°rios:* ${analysis.legal_solution.required_documents}

*‚ö†Ô∏è Riscos e Alternativas:* ${analysis.legal_solution.risks_and_alternatives}
`;
    }

    summary += `\n*üéØ PR√ìXIMOS PASSOS:*

${this.getNextSteps(conversation)}

*üìû CONTATO:*
Um de nossos advogados entrar√° em contato em breve para agendar uma consulta.

*‚è∞ PRAZO:* ${this.getContactTimeframe(conversation.urgency)}

Obrigado por escolher nosso escrit√≥rio! üíº‚öñÔ∏è`;

    return summary;
  }

  // Limpa a conversa ap√≥s um tempo
  cleanupConversation(contactId) {
    setTimeout(() => {
      this.conversationSteps.delete(contactId);
    }, 24 * 60 * 60 * 1000); // 24 horas
  }

  detectCaseType(message) {
    const lowerMessage = message.toLowerCase();
    
    for (const [caseType, caseInfo] of Object.entries(this.legalCases)) {
      for (const keyword of caseInfo.keywords) {
        if (lowerMessage.includes(keyword)) {
          return caseType;
        }
      }
    }
    
    // Detecta por n√∫meros das op√ß√µes
    if (lowerMessage.includes('1') || lowerMessage.includes('trabalhista')) return 'trabalhista';
    if (lowerMessage.includes('2') || lowerMessage.includes('fam√≠lia')) return 'familia';
    if (lowerMessage.includes('3') || lowerMessage.includes('civil')) return 'civil';
    if (lowerMessage.includes('4') || lowerMessage.includes('criminal')) return 'criminal';
    if (lowerMessage.includes('5') || lowerMessage.includes('consumidor')) return 'consumidor';
    
    return null;
  }

  detectUrgency(message) {
    const lowerMessage = message.toLowerCase();
    
    for (const [level, keywords] of Object.entries(this.urgencyLevels)) {
      for (const keyword of keywords) {
        if (lowerMessage.includes(keyword)) {
          return level;
        }
      }
    }
    
    return 'baixa';
  }

  getUrgencyText(urgency) {
    const urgencyTexts = {
      'alta': 'üî¥ ALTA (Atendimento priorit√°rio)',
      'media': 'üü° M√âDIA (Atendimento em 2-3 dias)',
      'baixa': 'üü¢ BAIXA (Atendimento em at√© 5 dias)'
    };
    
    return urgencyTexts[urgency] || urgencyTexts['baixa'];
  }

  getNextSteps(conversation) {
    const steps = {
      'trabalhista': `‚Ä¢ Separar todos os documentos trabalhistas (carteira, contratos, holerites)
‚Ä¢ Anotar datas importantes (admiss√£o, demiss√£o, problemas)
‚Ä¢ Listar testemunhas se houver`,
      
      'familia': `‚Ä¢ Reunir documentos pessoais (RG, CPF, certid√µes)
‚Ä¢ Listar bens do casal se houver
‚Ä¢ Documentos dos filhos se aplic√°vel`,
      
      'civil': `‚Ä¢ Organizar contratos e documentos relacionados
‚Ä¢ Reunir provas (fotos, mensagens, e-mails)
‚Ä¢ Anotar valores e datas importantes`,
      
      'criminal': `‚Ä¢ Guardar boletim de ocorr√™ncia se houver
‚Ä¢ Listar poss√≠veis testemunhas
‚Ä¢ Documentar provas (fotos, mensagens)`,
      
      'consumidor': `‚Ä¢ Guardar nota fiscal e comprovantes
‚Ä¢ Documentar defeitos com fotos
‚Ä¢ Hist√≥rico de tentativas de solu√ß√£o`
    };
    
    return steps[conversation.caseType] || '‚Ä¢ Organizar documentos relacionados ao caso';
  }

  getContactTimeframe(urgency) {
    const timeframes = {
      'alta': 'Hoje ou amanh√£',
      'media': '2 a 3 dias √∫teis',
      'baixa': 'At√© 5 dias √∫teis'
    };
    
    return timeframes[urgency] || timeframes['baixa'];
  }

  // M√©todo para administradores verem triagens
  getTriageData(contactId) {
    return this.conversationSteps.get(contactId);
  }

  // Lista todas as triagens ativas
  getAllTriages() {
    return Array.from(this.conversationSteps.entries()).map(([contactId, data]) => ({
      contactId,
      name: data.contactInfo.fullName,
      caseType: data.caseType,
      urgency: data.urgency,
      step: data.step,
      startTime: data.startTime
    }));
  }

  // Analisa o caso completo e gera triagem detalhada via LLM
  async analyzeCompleteCase(contactId, allMessages, groqService) {
    const conversation = this.conversationSteps.get(contactId);
    if (!conversation) return null;

    const caseDescription = allMessages.join('\n');
    const phone = contactId;
    
    try {
      // Usar o mesmo prompt estruturado do projeto original
      const prompt = this.buildTriagePrompt(caseDescription, phone);
      
      // Usar o GroqService para fazer a an√°lise via LLM
      const response = await groqService.generateAnalysisResponse(prompt);
      
      // Tentar fazer parse do JSON retornado
      let analysis;
      try {
        analysis = JSON.parse(response);
      } catch (parseError) {
        console.warn('Erro ao fazer parse do JSON da triagem, usando fallback:', parseError);
        analysis = this.createFallbackAnalysis(conversation, contactId, caseDescription);
      }
      
      // Verificar se o JSON est√° completo
      if (!analysis.client || !analysis.case || !analysis.triage || !analysis.legal_solution) {
        console.warn('JSON incompleto recebido, usando fallback');
        analysis = this.createFallbackAnalysis(conversation, contactId, caseDescription);
      }
      
      return analysis;
      
    } catch (error) {
      console.error('Erro na an√°lise de triagem:', error);
      return this.createFallbackAnalysis(conversation, contactId, caseDescription);
    }
  }

  // Constr√≥i o prompt estruturado para triagem (baseado no projeto original)
  buildTriagePrompt(incomingText, phone) {
    return `Voc√™ √© um assistente de triagem para um escrit√≥rio de advocacia brasileiro. 

INSTRU√á√ïES IMPORTANTES:
- Seja emp√°tico e profissional
- N√ÉO forne√ßa aconselhamento jur√≠dico espec√≠fico, apenas orienta√ß√µes gerais
- Analise o relato do cliente e extraia informa√ß√µes estruturadas
- Inclua sugest√µes de solu√ß√µes jur√≠dicas baseadas em precedentes e legisla√ß√£o
- Responda APENAS com um JSON v√°lido, sem explica√ß√µes adicionais

SCHEMA OBRIGAT√ìRIO:
{
  "client": {
    "name": "string - nome do cliente se mencionado",
    "phone": "string - telefone conhecido",
    "email": "string - email se mencionado"
  },
  "case": {
    "category": "string - uma de: Trabalhista, Civil, Penal, Empresarial, Tribut√°rio, Administrativo, Constitucional, Fam√≠lia, Consumidor, Imobili√°rio, Previdenci√°rio, Internacional, Outros",
    "description": "string - resumo do caso baseado no relato",
    "date": "string - data do fato se mencionada (formato YYYY-MM-DD)",
    "urgency": "string - uma de: alta, media, baixa",
    "documents": ["array de strings - documentos mencionados pelo cliente"]
  },
  "triage": {
    "confidence": "number - 0.0 a 1.0 - sua confian√ßa na categoriza√ß√£o",
    "escalate": "boolean - true se for emerg√™ncia que requer advogado imediato",
    "flags": ["array - poss√≠veis: medida_cautelar, amea√ßa, crime, prazo_urgente, risco_financeiro"],
    "recommended_action": "string - pr√≥xima a√ß√£o recomendada"
  },
  "legal_solution": {
    "summary": "string - resumo executivo da situa√ß√£o jur√≠dica (m√°ximo 200 palavras)",
    "legal_basis": "string - leis, c√≥digos e artigos aplic√°veis espec√≠ficos",
    "recommended_actions": "string - procedimentos recomendados passo a passo",
    "success_probability": "string - an√°lise da probabilidade de sucesso com justificativa",
    "required_documents": "string - documentos e provas necess√°rias",
    "risks_and_alternatives": "string - riscos processuais e alternativas extrajudiciais"
  }
}

CRIT√âRIOS DE URG√äNCIA:
- ALTA: risco de vida, prazos legais iminentes, crimes em andamento, medidas urgentes
- M√âDIA: quest√µes importantes mas sem urg√™ncia imediata
- BAIXA: consultas gerais, d√∫vidas simples

DIRETRIZES PARA SOLU√á√ïES JUR√çDICAS DETALHADAS:
- Base-se na legisla√ß√£o brasileira vigente (C√≥digos Civil, Penal, Trabalhista, Processual)
- Cite artigos espec√≠ficos, s√∫mulas e jurisprud√™ncia consolidada do STF, STJ e tribunais
- Desenvolva estrat√©gia jur√≠dica completa com fundamenta√ß√£o doutrin√°ria
- Inclua an√°lise de riscos processuais e contraproduc√™ncia
- Sugira tanto solu√ß√µes judiciais quanto extrajudiciais com detalhamento
- Considere aspectos pr√°ticos como documenta√ß√£o, per√≠cias e testemunhas
- Analise precedentes jurisprudenciais espec√≠ficos e tend√™ncias atuais
- Desenvolva estrat√©gias de negocia√ß√£o quando aplic√°vel
- Inclua medidas cautelares e urgentes quando necess√°rias
- Considere impactos tribut√°rios, trabalhistas ou regulat√≥rios quando relevantes

TEXTO DO CLIENTE: "${incomingText?.replace(/"/g, '\\"') || ''}"
TELEFONE: "${phone || ''}"

IMPORTANTE: Retorne apenas um JSON v√°lido e completo. Se estiver pr√≥ximo do limite de tokens, priorize completar o JSON com informa√ß√µes essenciais ao inv√©s de textos muito longos. Certifique-se de fechar todas as aspas e chaves.

Retorne apenas o JSON:`;
  }

  // Cria an√°lise de fallback quando a IA falha
  createFallbackAnalysis(conversation, contactId, caseDescription) {
    return {
      client: {
        name: conversation?.contactInfo?.name || conversation?.contactInfo?.fullName || 'N√£o informado',
        phone: contactId,
        email: conversation?.contactInfo?.email || 'N√£o informado'
      },
      case: {
        category: conversation?.caseType ? this.legalCases[conversation.caseType]?.name : 'Outros',
        description: caseDescription.substring(0, 500) + '...',
        date: null,
        urgency: conversation?.urgency || 'media',
        documents: conversation?.documents || []
      },
      triage: {
        confidence: 0.5,
        escalate: conversation?.urgency === 'alta',
        flags: this.getFlags(conversation),
        recommended_action: 'Consulta com advogado especializado para an√°lise detalhada'
      },
      legal_solution: {
        summary: 'Caso requer an√°lise especializada por advogado qualificado para elabora√ß√£o de estrat√©gia jur√≠dica adequada.',
        legal_basis: 'Legisla√ß√£o brasileira aplic√°vel ao caso espec√≠fico conforme an√°lise especializada.',
        recommended_actions: 'Consulta presencial para an√°lise completa da documenta√ß√£o e viabilidade jur√≠dica.',
        success_probability: 'A definir ap√≥s an√°lise detalhada dos documentos e circunst√¢ncias espec√≠ficas.',
        required_documents: 'Documentos relacionados ao caso conforme orienta√ß√£o especializada.',
        risks_and_alternatives: 'An√°lise de riscos e alternativas a serem apresentadas em consulta especializada.'
      }
    };
  }

  // M√©todo para limpar JSON truncado (do projeto original)
  cleanupJson(jsonString) {
    if (!jsonString || jsonString.trim() === '') {
      return this.createFallbackJson();
    }
    
    let cleaned = jsonString.trim();
    
    // Remove caracteres de controle, mantendo quebras de linha
    cleaned = cleaned.replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '');
    
    // Conta chaves e colchetes para verificar balanceamento
    const openBraces = (cleaned.match(/\{/g) || []).length;
    const closeBraces = (cleaned.match(/\}/g) || []).length;
    
    if (openBraces > closeBraces) {
      const missing = openBraces - closeBraces;
      cleaned += '}'.repeat(missing);
    }
    
    const openBrackets = (cleaned.match(/\[/g) || []).length;
    const closeBrackets = (cleaned.match(/\]/g) || []).length;
    
    if (openBrackets > closeBrackets) {
      const missing = openBrackets - closeBrackets;
      cleaned += ']'.repeat(missing);
    }
    
    // Verificar se √© JSON v√°lido
    try {
      JSON.parse(cleaned);
      return cleaned;
    } catch (e) {
      console.warn('JSON ainda inv√°lido ap√≥s limpeza:', e.message);
      return this.createFallbackJson();
    }
  }

  // JSON de fallback estruturado
  createFallbackJson() {
    return JSON.stringify({
      client: { name: null, phone: '', email: null },
      case: { category: 'Outros', description: 'Consulta jur√≠dica', urgency: 'media', documents: [] },
      triage: { confidence: 0.5, escalate: true, flags: [], recommended_action: 'Consulta com advogado especializado' },
      legal_solution: {
        summary: 'Caso requer an√°lise especializada por advogado qualificado',
        legal_basis: 'Legisla√ß√£o brasileira aplic√°vel ao caso espec√≠fico',
        recommended_actions: 'Consulta presencial para an√°lise detalhada',
        success_probability: 'A definir ap√≥s an√°lise completa',
        required_documents: 'Documentos relacionados ao caso',
        risks_and_alternatives: 'Riscos e alternativas a serem avaliados'
      }
    });
  }
}
