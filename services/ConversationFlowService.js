import fs from 'fs/promises';
import path from 'path';

export class ConversationFlowService {
  constructor(groqService, triageService, assistantName = 'Ana') {
    this.groqService = groqService;
    this.triageService = triageService;
    this.assistantName = assistantName; // Store the assistant name
    this.conversations = new Map();
    this.clients = new Map();
    this.messages = new Map();
    this.conversationIdCounter = 1;
    this.messageIdCounter = 1;
    this.pendingRetries = new Map(); // Track pending retries
    
    // Load persisted data
    this.loadConversations();
  }

  async processIncomingMessage(phone, messageText, originalPhoneForReply = null) {
    console.log(`Processing message - Phone: ${phone}, Text: ${messageText}`);
    
    try {
      const client = this.findOrCreateClient(phone);
      const conversation = this.findOrCreateActiveConversation(client);
      this.saveIncomingMessage(conversation, messageText);

      // Get response based on conversation state
      const response = await this.processConversationState(conversation, messageText, client);

      // Save outgoing message
      if (response && response.trim()) {
        this.saveOutgoingMessage(conversation, response);
      }

      conversation.lastActivityAt = new Date();
      this.saveConversations();

      return response;

    } catch (error) {
      console.error('Error processing message:', error);
      
      // Mark this message for retry
      const retryKey = `${phone}_${Date.now()}`;
      if (!this.pendingRetries) {
        this.pendingRetries = new Map();
      }
      
      this.pendingRetries.set(retryKey, {
        phone,
        messageText,
        originalPhoneForReply,
        attempts: 1,
        maxAttempts: 3
      });
      
      // Schedule retry in 30 seconds
      setTimeout(() => {
        this.retryMessage(retryKey);
      }, 30000);
      
      // Return natural "busy" message
      const busyMessages = [
        'Oi! Estou com muitas mensagens agora, mas j√° volto para te atender. Aguarde s√≥ um minutinho! üòä',
        'Ol√°! Estou meio ocupada no momento, mas j√° j√° retorno para continuar nossa conversa!',
        'Oi! S√≥ um momentinho, estou finalizando outro atendimento e j√° volto para voc√™!',
        'Ol√°! Estou um pouco sobrecarregada agora, mas em instantes volto para te ajudar!'
      ];
      
      return busyMessages[Math.floor(Math.random() * busyMessages.length)];
    }
  }

  findOrCreateClient(phone) {
    let client = this.clients.get(phone);
    if (!client) {
      client = {
        id: Date.now(),
        phone: phone,
        name: null,
        email: null,
        createdAt: new Date()
      };
      this.clients.set(phone, client);
    }
    return client;
  }

  findOrCreateActiveConversation(client) {
    console.log(`[DEBUG] findOrCreateActiveConversation - Looking for conversation for client: ${client.phone}`);
    
    // Find active conversation for this client
    for (const [id, conv] of this.conversations.entries()) {
      if (conv.client.phone === client.phone && conv.state !== 'COMPLETED') {
        console.log(`[DEBUG] findOrCreateActiveConversation - Found existing conversation: ${id}, state: ${conv.state}`);
        return conv;
      }
    }

    // Create new conversation
    const conversation = {
      id: this.conversationIdCounter++,
      client: client,
      state: 'GREETING',
      startedAt: new Date(),
      lastActivityAt: new Date(),
      conversationHistory: [] // Initialize the conversation history array
    };
    
    console.log(`[DEBUG] findOrCreateActiveConversation - Created new conversation: ${conversation.id} for client: ${client.phone}`);
    this.conversations.set(conversation.id, conversation);
    return conversation;
  }

  async processConversationState(conversation, messageText, client) {
    const state = conversation.state;
    console.log(`[DEBUG] processConversationState - Conversation ID: ${conversation.id}, State: ${state}, Client: ${client.phone}, Message: "${messageText}"`);
    
    switch (state) {
      case 'GREETING':
        return await this.handleGreeting(conversation, messageText, client);
      case 'COLLECTING_NAME':
        return this.handleNameCollection(conversation, messageText, client);
      case 'COLLECTING_EMAIL':
        return this.handleEmailCollection(conversation, messageText, client);
      case 'ANALYZING_CASE':
        return await this.handleCaseAnalysis(conversation, messageText, client);
      case 'COLLECTING_DETAILS':
        return await this.handleDetailCollection(conversation, messageText, client);
      case 'COLLECTING_DOCUMENTS':
        return await this.handleDocumentCollection(conversation, messageText, client);
      case 'AWAITING_LAWYER':
        return await this.handleAwaitingLawyer(conversation, messageText, client);
      case 'AWAITING_PREANALYSIS_DECISION':
        return await this.handlePreAnalysisDecision(conversation, messageText, client);
      default:
        return await this.handleGreeting(conversation, messageText, client);
    }
  }

  async handleGreeting(conversation, messageText, client) {
    // Check if the message looks like case details rather than a greeting
    const lowerText = messageText.toLowerCase();
    const isLikelyGreeting = lowerText.includes('ol√°') || 
                            lowerText.includes('oi') || 
                            lowerText.includes('bom dia') ||
                            lowerText.includes('boa tarde') ||
                            lowerText.includes('boa noite') ||
                            lowerText.includes('tudo bem') ||
                            messageText.length < 30;
    
    // If it doesn't look like a greeting and they have name/email, assume they're providing case details
    if (!isLikelyGreeting && client.name && client.name.length > 3 && client.email && client.email.includes('@')) {
      console.log(`[DEBUG] handleGreeting - Message doesn't look like greeting and client has info, moving to case analysis`);
      conversation.state = 'ANALYZING_CASE';
      return await this.handleCaseAnalysis(conversation, messageText, client);
    }
    
    // Check if we already have name and email, skip to case analysis
    if (client.name && client.name.length > 3 && client.email && client.email.includes('@')) {
      console.log(`[DEBUG] handleGreeting - Client already has name and email, moving to case analysis`);
      conversation.state = 'ANALYZING_CASE';
      
      const firstName = client.name.split(' ')[0];
      
      // AI generates natural greeting and transition to case discussion
      const greetingPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente (${client.name}) est√° retornando.

SITUA√á√ÉO: O cliente j√° forneceu nome e email anteriormente.

TAREFA: Fazer uma sauda√ß√£o calorosa reconhecendo que j√° se conhecem e ir direto ao caso.

INSTRU√á√ïES:
- Cumprimente usando o primeiro nome (${firstName})
- Reconhe√ßa que j√° se conhecem
- Convide a pessoa a contar sobre a situa√ß√£o jur√≠dica
- Seja calorosa mas objetiva
- Encoraje detalhes (datas, pessoas envolvidas, valores, etc.)

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(greetingPrompt);
    }
    
    // Check if we have name but no email
    if (client.name && client.name.length > 3) {
      console.log(`[DEBUG] handleGreeting - Client has name but no email, moving to email collection`);
      conversation.state = 'COLLECTING_EMAIL';
      
      const firstName = client.name.split(' ')[0];
      
      const emailPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente (${client.name}) est√° retornando.

SITUA√á√ÉO: Voc√™ j√° conhece o nome da pessoa mas precisa do email.

INSTRU√á√ïES:
- Cumprimente usando o primeiro nome (${firstName})
- Pe√ßa o email de forma natural
- Explique brevemente por que precisa (para atualiza√ß√µes)
- Seja calorosa mas objetiva

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(emailPrompt);
    }
    
    // Normal greeting flow - ask for name
    conversation.state = 'COLLECTING_NAME';
    
    // Let AI generate a completely natural greeting
    const greetingPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica do escrit√≥rio BriseWare. 
    
Um cliente acabou de entrar em contato via WhatsApp pela primeira vez.

TAREFA: Cumprimente de forma natural e pe√ßa o nome da pessoa.

INSTRU√á√ïES:
- Seja calorosa e profissional
- Use linguagem brasileira natural
- Seja concisa mas completa
- N√£o use emojis
- Se apresente como ${this.assistantName}
- SEMPRE responda em portugu√™s brasileiro

Responda APENAS com sua mensagem em portugu√™s:`;

    return await this.groqService.generateResponse(greetingPrompt);
  }

  async handleNameCollection(conversation, messageText, client) {
    console.log(`[DEBUG] handleNameCollection - Input: "${messageText}"`);
    console.log(`[DEBUG] handleNameCollection - Current client name: "${client.name}"`);
    console.log(`[DEBUG] handleNameCollection - Conversation state: "${conversation.state}"`);
    
    // If client already has a name and they're just providing it again or giving details, skip to email
    if (client.name && client.name.length > 3) {
      console.log(`[DEBUG] handleNameCollection - Client already has name, moving to email collection`);
      conversation.state = 'COLLECTING_EMAIL';
      
      const firstName = client.name.split(' ')[0];
      
      // Let AI generate natural response asking for email
      const emailPrompt = `Voc√™ √© Ana, assistente jur√≠dica. O cliente acabou de se apresentar como "${client.name}".

SITUA√á√ÉO: Agora voc√™ precisa do email da pessoa para enviar atualiza√ß√µes sobre o caso.

INSTRU√á√ïES:
- Reconhe√ßa o nome de forma calorosa (use "${firstName}")
- Pe√ßa o email de forma natural
- Explique brevemente por que precisa (para atualiza√ß√µes)
- Seja conversacional, n√£o robotizada

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(emailPrompt);
    }
    
    const name = this.extractName(messageText);
    console.log(`[DEBUG] handleNameCollection - Extracted name: "${name}"`);
    
    if (name && name.length > 3) {
      client.name = name;
      this.clients.set(client.phone, client);
      
      conversation.state = 'COLLECTING_EMAIL';
      console.log(`[DEBUG] handleNameCollection - Updated state to: "${conversation.state}"`);
      console.log(`[DEBUG] handleNameCollection - Updated client name to: "${client.name}"`);
      
      const firstName = name.split(' ')[0];
      
      // Let AI generate natural response asking for email
      const emailPrompt = `Voc√™ √© Ana, assistente jur√≠dica. O cliente acabou de se apresentar como "${name}".

SITUA√á√ÉO: Agora voc√™ precisa do email da pessoa para enviar atualiza√ß√µes sobre o caso.

INSTRU√á√ïES:
- Reconhe√ßa o nome de forma calorosa (use "${firstName}")
- Pe√ßa o email de forma natural
- Explique brevemente por que precisa (para atualiza√ß√µes)
- Seja conversacional, n√£o robotizada

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(emailPrompt);
    } else {
      console.log(`[DEBUG] handleNameCollection - Name not valid, asking again`);
      // AI generates natural request for name in context
      const nameRequestPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente respondeu "${messageText}" quando voc√™ pediu o nome.

SITUA√á√ÉO: A resposta pode conter uma pergunta ou n√£o ter um nome claro.

TAREFA: Se houver pergunta, responda brevemente e redirecione. Se n√£o houver nome, pe√ßa novamente.

INSTRU√á√ïES:
- Se h√° uma pergunta, responda de forma √∫til mas breve
- Explique que precisa do nome para personalizar o atendimento
- Redirecione gentilmente de volta ao pedido do nome
- Seja emp√°tica mas objetiva
- Seja concisa mas completa

EXEMPLO: Se perguntarem "por que precisa do nome?", responda "Para personalizar melhor seu atendimento. Como posso chamar voc√™?"

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(nameRequestPrompt);
    }
  }

  async handleEmailCollection(conversation, messageText, client) {
    console.log(`[DEBUG] handleEmailCollection - Input: "${messageText}"`);
    console.log(`[DEBUG] handleEmailCollection - Current client email: "${client.email}"`);
    
    // If client already has an email and they're just providing it again or giving details, skip to case analysis
    if (client.email && client.email.includes('@')) {
      console.log(`[DEBUG] handleEmailCollection - Client already has email, moving to case analysis`);
      conversation.state = 'ANALYZING_CASE';
      
      // AI generates natural transition to case discussion
      const transitionPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente (${client.name}) j√° forneceu o email "${client.email}".

TAREFA: Fazer a transi√ß√£o natural para ouvir sobre o caso.

INSTRU√á√ïES:
- Convide a pessoa a contar sobre a situa√ß√£o jur√≠dica
- Seja objetiva e emp√°tica
- Seja concisa mas clara
- N√£o use emojis
- Encoraje detalhes (datas, pessoas envolvidas, valores, etc.)

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(transitionPrompt);
    }
    
    const email = this.extractEmail(messageText);
    console.log(`[DEBUG] handleEmailCollection - Extracted email: "${email}"`);
    
    if (email) {
      client.email = email;
      this.clients.set(client.phone, client);
      
      conversation.state = 'ANALYZING_CASE';
      console.log(`[DEBUG] handleEmailCollection - Updated state to: "${conversation.state}"`);
      console.log(`[DEBUG] handleEmailCollection - Updated client email to: "${client.email}"`);
      
      // AI generates natural transition to case discussion
      const transitionPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente (${client.name}) acabou de fornecer o email "${email}".

TAREFA: Fazer a transi√ß√£o natural para ouvir sobre o caso.

INSTRU√á√ïES:
- Confirme o email rapidamente
- Convide a pessoa a contar sobre a situa√ß√£o jur√≠dica
- Seja objetiva e emp√°tica
- Seja concisa mas clara
- N√£o use emojis
- Encoraje detalhes (datas, pessoas envolvidas, valores, etc.)

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(transitionPrompt);
    } else {
      console.log(`[DEBUG] handleEmailCollection - Email not valid, asking again`);
      // AI generates natural request for valid email
      const emailClarificationPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente respondeu "${messageText}" quando voc√™ pediu o email.

SITUA√á√ÉO: A resposta pode conter uma pergunta ou n√£o ser um email v√°lido.

TAREFA: Se houver pergunta, responda brevemente e redirecione. Se n√£o houver email v√°lido, pe√ßa novamente.

INSTRU√á√ïES:
- Se h√° uma pergunta (como "pode ser qualquer um?"), responda de forma √∫til mas breve
- Explique que precisa de um email v√°lido para atualiza√ß√µes do caso
- Redirecione gentilmente de volta ao pedido de email
- Seja objetiva mas emp√°tica
- M√°ximo 2 frases

EXEMPLO: Se perguntarem "pode ser qualquer um?", responda "Sim, pode ser seu email pessoal ou profissional. Qual email voc√™ gostaria de usar?"

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(emailClarificationPrompt);
    }
  }

  async handleCaseAnalysis(conversation, messageText, client) {
    // Ensure conversationHistory array exists
    if (!conversation.conversationHistory) {
      conversation.conversationHistory = [];
    }
    
    // Acumula informa√ß√µes sobre o caso
    conversation.conversationHistory.push({
      role: 'user',
      content: messageText,
      timestamp: new Date().toISOString()
    });
    
    // Check if we have too many exchanges - auto-finalize to prevent loops
    const userMessages = conversation.conversationHistory.filter(msg => msg.role === 'user');
    if (userMessages.length >= 6) {
      console.log('Auto-finalizing conversation due to too many exchanges');
      conversation.state = 'COMPLETED';
      // Save the triage analysis if available
      if (conversation.analysis) {
        this.saveTriageAnalysis(conversation, conversation.analysis);
      }
      return `Entendi. Com base em todas as informa√ß√µes que voc√™ forneceu, nossa equipe jur√≠dica ir√° analisar seu caso detalhadamente. Um advogado especializado entrar√° em contato em at√© 24 horas para discutir os pr√≥ximos passos e esclarecer suas d√∫vidas.`;
    }
    
    // Se ainda n√£o fez an√°lise inicial ou precisa de mais informa√ß√µes
    if (!conversation.needsMoreInfo) {
      const analysis = await this.triageService.triageFromText(messageText, client.phone, this.groqService);
      conversation.analysis = analysis;
      
      // AI decides if more information is needed
      const analysisPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica especializada. O cliente ${client.name} contou sobre a situa√ß√£o:

"${messageText}"

AN√ÅLISE T√âCNICA:
- √Årea: ${analysis?.case?.category || 'N√£o identificada'}
- Urg√™ncia: ${analysis?.case?.urgency || 'M√©dia'}
- Complexidade: ${analysis?.triage?.complexity || 'M√©dia'}
- Confian√ßa: ${analysis?.triage?.confidence || 0.5}

AVALIA√á√ÉO DE COMPLETUDE:
Verifique se a mensagem cont√©m:
- ‚úì Situa√ß√£o claramente descrita com contexto completo (datas, pessoas, eventos)
- ‚úì Problema jur√≠dico espec√≠fico identificado
- ‚úì Consequ√™ncias ou danos mencionados
- ‚úì Cronologia dos fatos apresentada

REGRA IMPORTANTE: Se a mensagem for LONGA (mais de 300 caracteres) e DETALHADA com cronologia clara, geralmente J√Å CONT√âM informa√ß√µes suficientes.

TAREFA: Decidir se voc√™ precisa de mais informa√ß√µes ou se pode finalizar o atendimento.

Se PRECISAR de mais informa√ß√µes (apenas se faltarem elementos essenciais):
- Use apenas "entendi" ou "compreendo" para reconhecer a situa√ß√£o
- Fa√ßa UMA pergunta espec√≠fica sobre o que realmente falta
- Seja objetiva (m√°ximo 1 frase de pergunta)

Se TIVER informa√ß√µes SUFICIENTES (caso detalhado com cronologia):
- Comece sua resposta exatamente com "FINALIZAR:"
- N√ÉO fa√ßa resumo da situa√ß√£o (o cliente j√° sabe o que aconteceu)
- V√° direto aos pr√≥ximos passos
- Explique que um advogado especializado analisar√° o caso
- Informe que o advogado entrar√° em contato em breve

Responda APENAS com sua mensagem:`;

      const response = await this.groqService.generateResponse(analysisPrompt);
      
      if (response.startsWith('FINALIZAR:')) {
        conversation.state = 'AWAITING_PREANALYSIS_DECISION';
        // Save the triage analysis when conversation completes
        if (conversation.analysis) {
          this.saveTriageAnalysis(conversation, conversation.analysis);
        }
        
        // Store the completion message for later use
        conversation.completionMessage = response.substring(10).trim();
        
        // Ask if client wants pre-analysis
        return await this.askForPreAnalysis(conversation);
      } else {
        conversation.needsMoreInfo = true;
        return response;
      }
    } else {
      // J√° tinha an√°lise, agora com informa√ß√µes adicionais
      const conversationMessages = conversation.conversationHistory || [];
      const allUserMessages = conversationMessages.filter(msg => msg.role === 'user').map(msg => msg.content).join('\n\n');
      
      const followUpPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente ${client.name} deu mais informa√ß√µes:

√öLTIMA MENSAGEM: "${messageText}"

TODAS AS MENSAGENS DO CLIENTE:
"${allUserMessages}"

CONTEXTO ANTERIOR:
- √Årea: ${conversation.analysis?.case?.category || 'N√£o identificada'}

AN√ÅLISE CR√çTICA:
- Se o cliente disse "j√° expliquei tudo" ou similar, √© sinal que voc√™ est√° sendo repetitiva
- Se j√° h√° muitas informa√ß√µes detalhadas nas mensagens anteriores, provavelmente √© suficiente
- Se o cliente est√° frustrado, finalize o atendimento

TAREFA: Com todas essas informa√ß√µes, decidir se pode finalizar ou precisa saber mais.

REGRA IMPORTANTE: Se h√° muita informa√ß√£o j√° coletada E o cliente demonstra frustra√ß√£o, FINALIZE o atendimento.

Se PRECISAR de mais informa√ß√µes (apenas se essencial):
- Use apenas "entendi" - n√£o repita a situa√ß√£o
- Fa√ßa UMA pergunta espec√≠fica sobre algo realmente crucial
- M√°ximo 1 frase

Se TIVER informa√ß√µes SUFICIENTES OU cliente demonstrar frustra√ß√£o:
- Comece sua resposta exatamente com "FINALIZAR:"
- N√ÉO fa√ßa resumo (o cliente j√° conhece sua situa√ß√£o)
- V√° direto aos pr√≥ximos passos  
- Explique que um advogado especializado analisar√° o caso
- Informe que o advogado entrar√° em contato em breve

Responda APENAS com sua mensagem:`;

      const response = await this.groqService.generateResponse(followUpPrompt);
      
      if (response.startsWith('FINALIZAR:')) {
        conversation.state = 'AWAITING_PREANALYSIS_DECISION';
        // Save the triage analysis when conversation completes
        if (conversation.analysis) {
          this.saveTriageAnalysis(conversation, conversation.analysis);
        }
        
        // Store the completion message for later use
        conversation.completionMessage = response.substring(10).trim();
        
        // Ask if client wants pre-analysis
        return await this.askForPreAnalysis(conversation);
      } else {
        return response;
      }
    }
  }

  async handleDetailCollection(conversation, messageText, client) {
    if (messageText.length > 50) {
      conversation.state = 'ANALYZING_CASE';
      return this.handleCaseAnalysis(conversation, messageText, client);
    } else {
      // AI generates natural request for more details
      const detailPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente ${client.name} deu uma resposta: "${messageText}"

SITUA√á√ÉO: A resposta pode ser breve ou conter perguntas sobre o processo.

TAREFA: Se houver perguntas, responda brevemente e redirecione. Se a resposta for muito breve, pe√ßa mais detalhes.

INSTRU√á√ïES:
- Se h√° perguntas (sobre custos, tempo, processo), responda genericamente e redirecione
- Use apenas "entendi" - n√£o repita o que a pessoa disse
- Pe√ßa detalhes espec√≠ficos de forma objetiva
- Seja concisa mas completa
- Seja gentil mas direta

EXEMPLO: Se perguntarem "quanto custa?", responda "O advogado vai explicar sobre valores. Pode me dar mais detalhes sobre sua situa√ß√£o?"

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(detailPrompt);
    }
  }

  async handleDocumentCollection(conversation, messageText, client) {
    console.log('Final document collection and analysis...');
    
    conversation.state = 'COMPLETED';
    
    // Generate final comprehensive analysis (stored for admin only)
    const allMessages = this.getAllConversationText(conversation);
    const finalTriage = await this.triageService.triageFromText(allMessages, client.phone, this.groqService);
    
    if (finalTriage) {
      this.saveTriageAnalysis(conversation, finalTriage);
      
      const category = finalTriage.case?.category || 'Jur√≠dico';
      
      // AI generates natural completion message
      const completionPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente ${client.name} finalizou o processo de coleta de informa√ß√µes sobre um caso de ${category}.

SITUA√á√ÉO: Todas as informa√ß√µes foram coletadas e analisadas.

TAREFA: Dar uma mensagem final natural e profissional.

INSTRU√á√ïES:
- Agrade√ßa pela confian√ßa
- Confirme que as informa√ß√µes foram registradas
- Explique que um advogado especialista em ${category} entrar√° em contato
- Seja calorosa mas profissional
- Use linguagem natural brasileira

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(completionPrompt);
    }
    
    // Fallback AI message
    const fallbackPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente ${client.name} finalizou o atendimento.

TAREFA: Dar uma mensagem final profissional.

INSTRU√á√ïES:
- Agrade√ßa pelas informa√ß√µes
- Confirme que um advogado entrar√° em contato
- Seja calorosa e profissional

Responda APENAS com sua mensagem:`;

    return await this.groqService.generateResponse(fallbackPrompt);
  }

  async handleAwaitingLawyer(conversation, messageText, client) {
    const firstName = client.name ? client.name.split(' ')[0] : '';
    
    // AI generates natural response for clients who message while waiting
    const waitingPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica. O cliente ${firstName} j√° foi atendido e est√° aguardando contato de um advogado, mas enviou uma nova mensagem: "${messageText}"

SITUA√á√ÉO: Cliente j√° tem caso em andamento e est√° aguardando contato do advogado.

TAREFA: Responder de forma natural e tranquilizadora.

INSTRU√á√ïES:
- Confirme que o caso est√° sendo acompanhado
- Tranquilize sobre o contato do advogado
- Seja emp√°tica
- Use o nome ${firstName}
- Use linguagem natural brasileira

Responda APENAS com sua mensagem:`;

    return await this.groqService.generateResponse(waitingPrompt);
  }

  getRandomGreeting() {
    const now = new Date();
    const hour = now.getHours();
    
    let greetings;
    if (hour < 12) {
      greetings = [
        'Bom dia!',
        'Ol√°, bom dia!',
        'Oi! Bom dia!'
      ];
    } else if (hour < 18) {
      greetings = [
        'Boa tarde!',
        'Ol√°, boa tarde!',
        'Oi! Boa tarde!'
      ];
    } else {
      greetings = [
        'Boa noite!',
        'Ol√°, boa noite!',
        'Oi! Boa noite!'
      ];
    }
    
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  extractName(text) {
    console.log(`[DEBUG] extractName - Input: "${text}"`);
    
    // Check if it's clearly a question first
    if (text.includes('?') || 
        text.toLowerCase().includes('precisa') || 
        text.toLowerCase().includes('por que') ||
        text.toLowerCase().includes('porque') ||
        text.toLowerCase().includes('pra que') ||
        text.toLowerCase().includes('tem que') ||
        text.toLowerCase().includes('obrigat√≥rio')) {
      console.log(`[DEBUG] extractName - Detected question, returning null`);
      return null; // It's a question, not a name
    }
    
    // Check for common greeting patterns that aren't names
    const lowerText = text.toLowerCase();
    if (lowerText.includes('ol√°') || 
        lowerText.includes('oi') || 
        lowerText.includes('bom dia') ||
        lowerText.includes('boa tarde') ||
        lowerText.includes('boa noite') ||
        lowerText.includes('tudo bem')) {
      console.log(`[DEBUG] extractName - Detected greeting, returning null`);
      return null;
    }
    
    const words = text.trim().split(/\s+/);
    console.log(`[DEBUG] extractName - Words: ${JSON.stringify(words)}`);
    
    // If only one word and it's too short or common, probably not a name
    if (words.length === 1) {
      const word = words[0].toLowerCase();
      if (word.length < 3 || 
          ['sim', 'n√£o', 'ok', 'certo', 'claro', 'pode', 'sei'].includes(word)) {
        console.log(`[DEBUG] extractName - Single word rejected: "${word}"`);
        return null;
      }
    }
    
    if (words.length >= 2) {
      // Remove common words that aren't names
      const filtered = words.filter(word => 
        !['meu', 'nome', '√©', 'sou', 'eu', 'me', 'chamo', 'aqui', 'ol√°', 'oi'].includes(word.toLowerCase())
      );
      console.log(`[DEBUG] extractName - Filtered words: ${JSON.stringify(filtered)}`);
      
      // If after filtering we have at least one word that could be a name (contains only letters)
      const hasValidNameWord = filtered.some(word => 
        /^[a-z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√±]+$/i.test(word) && word.length > 1
      );
      console.log(`[DEBUG] extractName - Has valid name word: ${hasValidNameWord}`);
      
      if (hasValidNameWord && filtered.length > 0) {
        // Capitalize each word properly
        const properName = filtered.map(word => 
          word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
        ).join(' ');
        console.log(`[DEBUG] extractName - Returning multi-word name: "${properName}"`);
        return properName;
      }
    }
    
    // For single words, check if it looks like a name (contains only letters, reasonable length)
    if (words.length === 1) {
      const word = words[0];
      if (/^[a-z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√±]+$/i.test(word) && word.length >= 3) {
        const properName = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        console.log(`[DEBUG] extractName - Returning single word name: "${properName}"`);
        return properName;
      }
    }
    
    console.log(`[DEBUG] extractName - No valid name found, returning null`);
    return null; // Couldn't identify a valid name
  }

  extractEmail(text) {
    const emailPattern = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/;
    const match = text.match(emailPattern);
    return match ? match[0] : null;
  }

  getAllConversationText(conversation) {
    const conversationMessages = this.messages.get(conversation.id) || [];
    return conversationMessages
      .filter(msg => msg.direction === 'IN')
      .map(msg => msg.body)
      .join('\n');
  }

  // Check if the text contains specific details that indicate completeness
  hasSpecificDetails(text) {
    const indicators = [
      // Date patterns
      /\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2} de \w+ de \d{4}|janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro/i,
      // Value patterns
      /R\$\s*\d+|reais?\s*\d+|\d+\s*mil|\d+\s*milh√£o/i,
      // Document mentions
      /contrato|documento|comprovante|recibo|nota fiscal|boleto|email|carta|of√≠cio|intima√ß√£o|cita√ß√£o/i,
      // Specific legal terms
      /artigo \d+|lei \d+|c√≥digo|clt|constitui√ß√£o|s√∫mula/i,
      // Time references
      /h√° \d+ anos?|h√° \d+ meses?|desde \d+|em \d+|no dia|na √©poca|quando/i,
      // People/companies
      /empresa|chefe|patr√£o|ex-|funcion√°rio|cliente|fornecedor|vizinho/i
    ];
    
    const matches = indicators.filter(pattern => pattern.test(text)).length;
    return matches >= 2; // At least 2 types of specific details
  }

  saveIncomingMessage(conversation, text) {
    if (!this.messages.has(conversation.id)) {
      this.messages.set(conversation.id, []);
    }
    
    const message = {
      id: this.messageIdCounter++,
      conversation: conversation,
      direction: 'IN',
      body: text,
      timestamp: new Date(),
      rawPayload: { text: text }
    };
    
    this.messages.get(conversation.id).push(message);
  }

  saveOutgoingMessage(conversation, text) {
    if (!this.messages.has(conversation.id)) {
      this.messages.set(conversation.id, []);
    }
    
    const message = {
      id: this.messageIdCounter++,
      conversation: conversation,
      direction: 'OUT',
      body: text,
      timestamp: new Date(),
      rawPayload: { human_response: true }
    };
    
    this.messages.get(conversation.id).push(message);
  }

  saveTriageAnalysis(conversation, triageData) {
    if (!this.messages.has(conversation.id)) {
      this.messages.set(conversation.id, []);
    }
    
    const message = {
      id: this.messageIdCounter++,
      conversation: conversation,
      direction: 'ANALYSIS',
      body: JSON.stringify(triageData, null, 2),
      timestamp: new Date(),
      rawPayload: triageData
    };
    
    this.messages.get(conversation.id).push(message);
  }

  getUrgencyText(urgency) {
    const urgencyTexts = {
      'alta': 'üî¥ ALTA - Requer aten√ß√£o imediata',
      'media': 'üü° M√âDIA - Importante mas sem urg√™ncia',
      'baixa': 'üü¢ BAIXA - Consulta geral'
    };
    return urgencyTexts[urgency] || urgencyTexts['baixa'];
  }

  getContactTimeframe(urgency) {
    const timeframes = {
      'alta': 'Hoje ou amanh√£',
      'media': '2 a 3 dias √∫teis',
      'baixa': 'At√© 5 dias √∫teis'
    };
    return timeframes[urgency] || timeframes['baixa'];
  }

  // Persistence methods
  async saveConversations() {
    try {
      const data = {
        conversations: Object.fromEntries(this.conversations),
        clients: Object.fromEntries(this.clients),
        messages: Object.fromEntries(this.messages),
        counters: {
          conversationId: this.conversationIdCounter,
          messageId: this.messageIdCounter
        }
      };
      
      await fs.writeFile(
        path.join(process.cwd(), 'data', 'conversations.json'),
        JSON.stringify(data, null, 2)
      );
    } catch (error) {
      console.error('Error saving conversations:', error);
    }
  }

  async loadConversations() {
    try {
      const filePath = path.join(process.cwd(), 'data', 'conversations.json');
      const data = await fs.readFile(filePath, 'utf8');
      const parsed = JSON.parse(data);
      
      this.conversations = new Map(Object.entries(parsed.conversations || {}));
      this.clients = new Map(Object.entries(parsed.clients || {}));
      this.messages = new Map(Object.entries(parsed.messages || {}));
      
      // Ensure all loaded conversations have conversationHistory array
      for (const [id, conversation] of this.conversations.entries()) {
        if (!conversation.conversationHistory) {
          conversation.conversationHistory = [];
        }
      }
      
      if (parsed.counters) {
        this.conversationIdCounter = parsed.counters.conversationId || 1;
        this.messageIdCounter = parsed.counters.messageId || 1;
      }
      
      console.log(`Loaded ${this.conversations.size} conversations, ${this.clients.size} clients`);
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.error('Error loading conversations:', error);
      }
    }
  }

  // Admin methods
  getAllConversations() {
    return Array.from(this.conversations.values()).map(conv => {
      // Get triage analysis for this conversation
      const messages = this.messages.get(conv.id) || [];
      const analysisMessage = messages.find(msg => msg.direction === 'ANALYSIS');
      
      // Use analysis message if available, otherwise use conversation.analysis
      const triageAnalysis = analysisMessage ? analysisMessage.rawPayload : conv.analysis;
      
      return {
        id: conv.id,
        client: conv.client,
        state: conv.state,
        startedAt: conv.startedAt,
        lastActivityAt: conv.lastActivityAt,
        triageAnalysis: triageAnalysis,
        preAnalysis: conv.preAnalysis, // Include pre-analysis if available
        timestamp: conv.startedAt,
        urgency: triageAnalysis?.case?.urgency || 'baixa'
      };
    });
  }

  getConversationMessages(conversationId) {
    return this.messages.get(parseInt(conversationId)) || [];
  }

  getAllTriages() {
    const triages = [];
    for (const [convId, messages] of this.messages.entries()) {
      const analysisMessages = messages.filter(msg => msg.direction === 'ANALYSIS');
      if (analysisMessages.length > 0) {
        const conversation = this.conversations.get(convId);
        if (conversation) {
          triages.push({
            conversationId: convId,
            client: conversation.client,
            analysis: analysisMessages[analysisMessages.length - 1].rawPayload,
            timestamp: analysisMessages[analysisMessages.length - 1].timestamp
          });
        }
      }
    }
    return triages;
  }

  async retryMessage(retryKey) {
    const retryData = this.pendingRetries.get(retryKey);
    
    if (!retryData) {
      console.log(`Retry key ${retryKey} not found`);
      return;
    }
    
    console.log(`Attempting retry ${retryData.attempts}/${retryData.maxAttempts} for ${retryData.phone}`);
    
    try {
      // Try to process the message again
      const response = await this.processIncomingMessage(
        retryData.phone, 
        retryData.messageText, 
        retryData.originalPhoneForReply
      );
      
      // If successful, remove from retry queue and notify via callback
      this.pendingRetries.delete(retryKey);
      
      // Notify the BotManager about the successful retry
      if (this.onRetrySuccess) {
        this.onRetrySuccess(retryData.phone, response);
      }
      
      console.log(`Retry successful for ${retryData.phone}`);
      
    } catch (error) {
      console.error(`Retry attempt ${retryData.attempts} failed:`, error);
      
      retryData.attempts++;
      
      if (retryData.attempts <= retryData.maxAttempts) {
        // Schedule another retry in 30 seconds
        setTimeout(() => {
          this.retryMessage(retryKey);
        }, 30000);
        
        console.log(`Scheduling retry ${retryData.attempts}/${retryData.maxAttempts} in 30s`);
      } else {
        // Max attempts reached, give up and send final message
        this.pendingRetries.delete(retryKey);
        
        if (this.onRetryFailed) {
          this.onRetryFailed(retryData.phone, 'Desculpe, n√£o consegui processar sua mensagem. Tente novamente mais tarde.');
        }
        
        console.log(`Max retry attempts reached for ${retryData.phone}`);
      }
    }
  }

  // Set callback functions for retry events
  setRetryCallbacks(onSuccess, onFailed) {
    this.onRetrySuccess = onSuccess;
    this.onRetryFailed = onFailed;
  }

  /**
   * Ask if client wants a pre-analysis of their case
   */
  async askForPreAnalysis(conversation) {
    const preAnalysisPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica do escrit√≥rio BriseWare.

Voc√™ acabou de concluir a triagem inicial de um caso jur√≠dico. Agora deve oferecer uma pr√©-an√°lise gratuita.

TAREFA: Oferecer uma mini-an√°lise do caso de forma atrativa.

INSTRU√á√ïES:
- Explique que pode oferecer uma pr√©-an√°lise gratuita imediata
- Mencione que √© um mini-diagn√≥stico com orienta√ß√µes iniciais
- Pergunte se o cliente gostaria de receber essa an√°lise
- Seja clara que isso √© adicional e gratuito
- Use linguagem convidativa mas profissional
- SEMPRE responda em portugu√™s brasileiro

FORMATO: Responda apenas com sua mensagem direta ao cliente.

Responda APENAS com sua mensagem:`;

    return await this.groqService.generateResponse(preAnalysisPrompt);
  }

  /**
   * Handle client's decision about pre-analysis
   */
  async handlePreAnalysisDecision(conversation, messageText, client) {
    const decision = messageText.toLowerCase().trim();
    
    // Check for positive responses
    const positiveResponses = ['sim', 'yes', 'quero', 'aceito', 'gostaria', 'ok', 'pode', 'manda', 'enviar'];
    const negativeResponses = ['n√£o', 'nao', 'no', 'obrigado', 'obrigada', 'dispenso', 'sem necessidade'];
    
    const wantsPreAnalysis = positiveResponses.some(word => decision.includes(word));
    const doesntWantPreAnalysis = negativeResponses.some(word => decision.includes(word));
    
    if (wantsPreAnalysis) {
      // Client wants pre-analysis
      conversation.state = 'GENERATING_PREANALYSIS';
      return await this.generatePreAnalysis(conversation);
    } else if (doesntWantPreAnalysis) {
      // Client doesn't want pre-analysis, complete conversation
      conversation.state = 'COMPLETED';
      return conversation.completionMessage || 'Entendido. Nosso advogado especializado analisar√° seu caso e entrar√° em contato em breve.';
    } else {
      // Unclear response, ask for clarification
      const clarificationPrompt = `Voc√™ √© ${this.assistantName}, assistente jur√≠dica do escrit√≥rio BriseWare.

O cliente respondeu sobre a pr√©-an√°lise mas a resposta n√£o ficou clara: "${messageText}"

TAREFA: Esclarecer se ele quer ou n√£o a pr√©-an√°lise.

INSTRU√á√ïES:
- Seja educada e paciente
- Reformule a pergunta de forma mais direta
- Mencione que √© s√≥ responder "sim" ou "n√£o"
- Mantenha tom amig√°vel
- SEMPRE responda em portugu√™s brasileiro

Responda APENAS com sua mensagem:`;

      return await this.groqService.generateResponse(clarificationPrompt);
    }
  }

  /**
   * Generate a pre-analysis of the case
   */
  async generatePreAnalysis(conversation) {
    // Collect all the case information from stored messages
    const messages = this.messages.get(conversation.id) || [];
    console.log(`Debug: Found ${messages.length} messages for conversation ${conversation.id}`);
    console.log(`Debug: Messages:`, messages.map(m => ({direction: m.direction, body: m.body?.substring(0, 50)})));
    
    const caseInfo = messages
      .filter(msg => msg.direction === 'IN') // User messages are stored as 'IN'
      .map(msg => msg.body || msg.text) // Use body or text property
      .join('\n');
    
    console.log(`Debug: Extracted caseInfo length: ${caseInfo.length}`);
    console.log(`Debug: CaseInfo preview: ${caseInfo.substring(0, 200)}...`);
    
    // Also include any stored case details
    const additionalInfo = conversation.caseDetails || '';
    const fullCaseInfo = [caseInfo, additionalInfo].filter(Boolean).join('\n\n');
    
    if (!fullCaseInfo || fullCaseInfo.trim().length === 0) {
      console.log(`Debug: No case info found, falling back`);
      // Fallback to basic conversation data if no detailed messages
      const basicInfo = `Cliente: ${conversation.client.name}\nTelefone: ${conversation.client.phone}\nEmail: ${conversation.client.email}`;
      return 'Desculpe, n√£o tenho informa√ß√µes suficientes sobre o caso para gerar uma pr√©-an√°lise detalhada. Nosso advogado especializado analisar√° seu caso e entrar√° em contato em breve.';
    }
    
    const preAnalysisPrompt = `Voc√™ √© uma advogada especialista brasileira fazendo uma pr√©-an√°lise CONCISA de um caso jur√≠dico.

INFORMA√á√ïES DO CASO:
${fullCaseInfo}

TAREFA: Criar uma pr√©-an√°lise RESUMIDA e objetiva do caso.

ESTRUTURA DA AN√ÅLISE (use markdown):
### 1. Natureza do caso
### 2. Principais pontos jur√≠dicos
### 3. Documentos essenciais
### 4. Pr√≥ximos passos

INSTRU√á√ïES:
- Seja CONCISA e objetiva (m√°ximo 2000 caracteres)
- Use markdown para formata√ß√£o (t√≠tulos com ###)
- Linguagem t√©cnica mas acess√≠vel
- Seja espec√≠fica sobre a situa√ß√£o
- N√ÉO fa√ßa promessas sobre resultados
- Mencione que √© an√°lise preliminar
- SEMPRE responda em portugu√™s brasileiro

IMPORTANTE: Finalize com uma linha explicando que esta √© uma an√°lise preliminar.

Responda APENAS com a pr√©-an√°lise em markdown:`;

    try {
      const preAnalysis = await this.groqService.generateAnalysisResponse(preAnalysisPrompt);
      
      // Complete the conversation after generating pre-analysis
      conversation.state = 'COMPLETED';
      conversation.preAnalysis = preAnalysis; // Store the pre-analysis
      
      return preAnalysis;
    } catch (error) {
      console.error('Error generating pre-analysis:', error);
      conversation.state = 'COMPLETED';
      return 'Desculpe, houve um problema ao gerar a pr√©-an√°lise. Nosso advogado especializado analisar√° seu caso e entrar√° em contato em breve.';
    }
  }
}

export default ConversationFlowService;
